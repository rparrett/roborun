{"version":3,"sources":["src/glimmerstrands.ts"],"names":["Line","data","style","this","min","Number","MAX_VALUE","max","MIN_VALUE","forEach","num","prototype","addPoint","point","push","GlimmerStrands","container","lines","el","document","createElementNS","setAttribute","appendChild","addLine","line","addData","_this","index","clear","firstChild","remove","render","length","polyline","points","dataPoint","x","y","toString","join"],"mappings":"AAAA,IAAAA,KAAA,WAMI,SAAAA,EAAYC,EAAwBC,QAAA,IAAAA,IAAAA,EAAA,IAChCC,KAAKD,MAAQA,EACbC,KAAKF,KAAOA,EAEZ,IAAIG,EAAMC,OAAOC,UACbC,EAAMF,OAAOG,UAEjBP,EAAKQ,QAAQ,SAAUC,GACfA,EAAMN,IACNA,EAAMM,GAEAH,EAANG,IACAH,EAAMG,KAIdP,KAAKC,IAAMA,EACXD,KAAKI,IAAMA,EAcnB,OAXIP,EAAAW,UAAAC,SAAA,SAASC,GACDA,EAAQV,KAAKC,MACbD,KAAKC,IAAMS,GAGXA,EAAQV,KAAKI,MACbJ,KAAKI,IAAMM,GAGfV,KAAKF,KAAKa,KAAKD,IAEvBb,EArCA,GAuCAe,eAAA,WAMI,SAAAA,EAAYC,GALZb,KAAAc,MAAqB,GAMjBd,KAAKe,GAAKC,SAASC,gBAAgB,6BAA8B,OACjEjB,KAAKe,GAAGG,aAAa,QAAS,QAC9BlB,KAAKe,GAAGG,aAAa,SAAU,QAC/BlB,KAAKe,GAAGG,aAAa,UAAW,gBAChClB,KAAKe,GAAGG,aAAa,sBAAuB,QAC5CL,EAAUM,YAAYnB,KAAKe,IAuDnC,OApDIH,EAAAJ,UAAAY,QAAA,SAAQC,GACJrB,KAAKc,MAAMH,KAAKU,IAGpBT,EAAAJ,UAAAc,QAAA,SAAQxB,GACJ,IAAIyB,EAAQvB,KACZF,EAAKQ,QAAQ,SAAUI,EAAOc,GAC1BD,EAAMT,MAAMU,GAAOf,SAASC,MAIpCE,EAAAJ,UAAAiB,MAAA,WACI,KAAOzB,KAAKe,GAAGW,YACX1B,KAAKe,GAAGW,WAAWC,UAI3Bf,EAAAJ,UAAAoB,OAAA,WACI,IAAIL,EAAQvB,KAERC,EAAMC,OAAOC,UACbC,EAAMF,OAAOG,UACjBL,KAAKc,MAAMR,QAAQ,SAAUe,GACrBA,EAAKpB,IAAMA,IACXA,EAAMoB,EAAKpB,KAEXoB,EAAKjB,IAAMA,IACXA,EAAMiB,EAAKjB,OAInBJ,KAAKyB,QAELzB,KAAKc,MAAMR,QAAQ,SAAUe,GACzB,KAAIA,EAAKvB,KAAK+B,QAAU,GAAxB,CAIA,IAAIC,EAAWd,SAASC,gBAAgB,6BAA8B,YACtEa,EAASZ,aAAa,gBAAiB,sBACvC,IAAIa,EAAwB,GAC5BV,EAAKvB,KAAKQ,QAAQ,SAAU0B,EAAWR,GACnC,IAAIS,EAAY,EAART,GAAeH,EAAKvB,KAAK+B,OAAS,GACtCK,EAAI,EAAMF,EAAY5B,EAE1B2B,EAAOpB,KAAKsB,EAAEE,WAAa,IAAMD,EAAEC,cAEvCL,EAASZ,aAAa,SAAUa,EAAOK,KAAK,MAC5CN,EAASZ,aAAa,QAASG,EAAKtB,OACpCwB,EAAMR,GAAGI,YAAYW,OAGjClB,EAnEA","file":"glimmerstrands.min.js","sourcesContent":["class Line {\n    data: Array<number>;\n    min: number;\n    max: number;\n    style: string;\n\n    constructor(data: Array < number >, style: string = \"\") {\n        this.style = style;\n        this.data = data;  \n\n        let min = Number.MAX_VALUE;\n        let max = Number.MIN_VALUE;\n\n        data.forEach(function (num) { \n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        })\n\n        this.min = min;\n        this.max = max;        \n    }\n\n    addPoint(point: number) {\n        if (point < this.min) {\n            this.min = point;\n        }\n\n        if (point > this.max) {\n            this.max = point;\n        }\n\n        this.data.push(point);\n    }\n}\n\nclass GlimmerStrands {\n    lines: Array<Line> = [];\n    min: number;\n    max: number;\n    el: Element;\n\n    constructor(container: Element) {\n        this.el = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        this.el.setAttribute('width', \"100%\");\n        this.el.setAttribute('height', \"100%\");\n        this.el.setAttribute('viewBox', \"0 -0.1 1 1.1\");\n        this.el.setAttribute('preserveAspectRatio', \"none\");\n        container.appendChild(this.el);\n    }\n\n    addLine(line: Line) {\n        this.lines.push(line);\n    }\n\n    addData(data: Array<number>) {\n        let _this = this;\n        data.forEach(function (point, index) { \n            _this.lines[index].addPoint(point);\n        });\n    }\n\n    clear() {\n        while (this.el.firstChild) {\n            this.el.firstChild.remove();\n        }\n    }\n\n    render() {\n        let _this = this;\n\n        let min = Number.MAX_VALUE;\n        let max = Number.MIN_VALUE;\n        this.lines.forEach(function (line) { \n            if (line.min < min) {\n                min = line.min;\n            }\n            if (line.max > max) {\n                max = line.max;\n            }\n        });\n\n        this.clear();\n\n        this.lines.forEach(function (line) { \n            if (line.data.length <= 1) {\n                return;\n            }\n\n            let polyline = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polyline\");\n            polyline.setAttribute('vector-effect', \"non-scaling-stroke\");\n            let points: Array<string> = [];\n            line.data.forEach(function (dataPoint, index) {\n                let x = index * 1.0 / (line.data.length - 1);\n                let y = 1.0 - dataPoint / max;\n\n                points.push(x.toString() + \",\" + y.toString());  \n            });\n            polyline.setAttribute(\"points\", points.join(\" \"));\n            polyline.setAttribute(\"style\", line.style);\n            _this.el.appendChild(polyline);\n        });        \n    }\n}\n"]}